(BYTECODE-FUNCTION (NAME main) (CODE (11 0 9 0 10 0 15 11 1 9 1 10 0 15 11 2 9 2 10 0 15 11 3 9 3 10 0 15 11 4 9 4 10 0 15 11 5 9 5 10 0 15 11 6 9 6 10 0 15 11 7 9 7 10 0 15 11 8 9 8 10 0 15 11 9 9 9 10 0 15 11 10 9 10 10 0 15 11 11 9 11 10 0 15 11 12 9 12 10 0 15 11 13 9 13 10 0 15 11 14 9 14 10 0 15 11 15 9 15 10 0 15 11 16 9 16 10 0 15 11 17 9 17 10 0 15 11 18 9 18 10 0 15 11 19 9 19 10 0 15 11 20 9 20 10 0 15 11 21 9 21 10 0 15 11 22 9 22 10 0 15 11 23 9 23 10 0 15 11 24 9 24 10 0 15 11 25 9 25 10 0 15 11 26 9 26 10 0 15 11 27 9 27 10 0 15 11 28 9 28 10 0 15 11 29 9 29 10 0 15 11 30 9 30 10 0 15 11 31 9 31 10 0 15 11 32 9 32 10 0 15 11 33 9 33 10 0 15 11 34 12 0 9 34 10 0 15 11 35 12 0 9 35 10 0 15 11 36 9 36 10 0 15 11 37 9 37 10 0 15 11 38 9 38 10 0 15 11 39 9 39 10 0 15 11 40 9 40 10 0 15 11 41 9 41 10 0 15 11 42 9 42 10 0 15 11 43 9 43 10 0 15 11 44 9 44 10 0 15 11 45 9 45 10 0 15 11 46 9 46 10 0 15 8 47 9 48 10 0 15 11 47 9 49 10 0 15 10 1 9 50 10 0 15 10 2 9 50 10 0 9 50 10 0 15 11 48 9 51 10 0 15 11 49 9 52 10 0 15 11 50 9 53 10 0 15 11 51 9 54 10 0 15 11 52 9 55 10 0 15 11 53 9 56 10 0 15 11 54 9 57 10 0 15 11 55 9 58 10 0 15 11 56 9 59 10 0 15 11 57 9 60 10 0 15 11 58 9 61 10 0 15 11 59 9 62 10 0 15 11 60 9 63 10 0 15 11 61 9 64 10 0 15 11 62 9 65 10 0 15 11 63 9 66 10 0 15 10 1 9 67 10 0 15 10 3 8 68 12 1 11 64 12 1 9 69 10 0 15 11 65 9 70 10 0 15 8 67 2 4 2 11 66 0 6 2 11 67 9 71 10 0 15 11 68 9 72 10 0 15 11 69 9 73 10 0 15 11 70 9 74 10 0 15 11 71 9 75 10 0 15 11 72 9 76 10 0 15 11 73 9 77 10 0 15 11 74 9 78 10 0 15 11 75 9 79 10 0 15 11 76 9 80 10 0 15 11 77 9 81 10 0 15 11 78 9 82 10 0 15 11 79 9 83 10 0 15 8 84 9 85 10 0 15 11 80 9 86 10 0 15 8 85 12 0 8 56 12 1 8 72 12 1 8 47 12 1 14)) (NB-ARGS 0 #f) (NB-LOCALS 0) (UPVAL-DESCRS ()) (CONSTS (#<unspecified> #f #t "bytecode-descr.ss")) (NAMES (id not <= >= caar cadr cdar cddr caaar caadr cadar caddr cdaar cdadr cddar cdddr caaaar caaadr caadar caaddr cadaar cadadr caddar cadddr cdaaar cdaadr cdadar cdaddr cddaar cddadr cdddar cddddr list cons* length reverse list-tail list-head list-ref list-index map for-each append assoc range fibo prn display write do-times *unspec* assert all flatten concat-map split-dotted-pair expand-builtin-macro expand-let expand-letrec expand-cond expand-or expand-and expand-require make-box expand-unquote! expand-unquote-splicing! expand-quasiquote *debug* open-input-file *bytecode-descr* codesize assemble compile-program compile-function compile-expr-in compile-pair-in compile-var-in compile-const-in compile-define-in compile-set!-in compile-lambda-in compile-if-in compile-application-in make-function read read-program run-program)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME id) (CODE (3 0 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES ()) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME not) (CODE (3 0 2 10 0 10 0 0 12 0 10 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS (#f #t)) (NAMES ()) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME <=) (CODE (10 0 4 2 10 1 15 3 0 3 1 8 0 12 2 4 2 10 1 15 3 2 2 30 0 3 2 0 55 0 3 0 3 1 8 1 12 2 4 2 10 1 15 3 2 2 53 0 3 2 0 55 0 10 0 14)) (NB-ARGS 2 #f) (NB-LOCALS 3) (UPVAL-DESCRS ()) (CONSTS (#f #<unspecified>)) (NAMES (< =)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME >=) (CODE (10 0 4 2 10 1 15 3 0 3 1 8 0 12 2 4 2 10 1 15 3 2 2 30 0 3 2 0 55 0 3 0 3 1 8 1 12 2 4 2 10 1 15 3 2 2 53 0 3 2 0 55 0 10 0 14)) (NB-ARGS 2 #f) (NB-LOCALS 3) (UPVAL-DESCRS ()) (CONSTS (#f #<unspecified>)) (NAMES (> =)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME caar) (CODE (3 0 8 0 12 1 8 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cadr) (CODE (3 0 8 0 12 1 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (cdr car)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cdar) (CODE (3 0 8 0 12 1 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car cdr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cddr) (CODE (3 0 8 0 12 1 8 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (cdr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME caaar) (CODE (3 0 8 0 12 1 8 0 12 1 8 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME caadr) (CODE (3 0 8 0 12 1 8 1 12 1 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (cdr car)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cadar) (CODE (3 0 8 0 12 1 8 1 12 1 8 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car cdr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME caddr) (CODE (3 0 8 0 12 1 8 0 12 1 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (cdr car)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cdaar) (CODE (3 0 8 0 12 1 8 0 12 1 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car cdr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cdadr) (CODE (3 0 8 0 12 1 8 1 12 1 8 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (cdr car)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cddar) (CODE (3 0 8 0 12 1 8 1 12 1 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car cdr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cdddr) (CODE (3 0 8 0 12 1 8 0 12 1 8 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (cdr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME caaaar) (CODE (3 0 8 0 12 1 8 0 12 1 8 0 12 1 8 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME caaadr) (CODE (3 0 8 0 12 1 8 1 12 1 8 1 12 1 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (cdr car)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME caadar) (CODE (3 0 8 0 12 1 8 1 12 1 8 0 12 1 8 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car cdr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME caaddr) (CODE (3 0 8 0 12 1 8 0 12 1 8 1 12 1 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (cdr car)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cadaar) (CODE (3 0 8 0 12 1 8 0 12 1 8 1 12 1 8 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car cdr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cadadr) (CODE (3 0 8 0 12 1 8 1 12 1 8 0 12 1 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (cdr car)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME caddar) (CODE (3 0 8 0 12 1 8 1 12 1 8 1 12 1 8 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car cdr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cadddr) (CODE (3 0 8 0 12 1 8 0 12 1 8 0 12 1 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (cdr car)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cdaaar) (CODE (3 0 8 0 12 1 8 0 12 1 8 0 12 1 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car cdr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cdaadr) (CODE (3 0 8 0 12 1 8 1 12 1 8 1 12 1 8 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (cdr car)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cdadar) (CODE (3 0 8 0 12 1 8 1 12 1 8 0 12 1 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car cdr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cdaddr) (CODE (3 0 8 0 12 1 8 0 12 1 8 1 12 1 8 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (cdr car)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cddaar) (CODE (3 0 8 0 12 1 8 0 12 1 8 1 12 1 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car cdr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cddadr) (CODE (3 0 8 0 12 1 8 1 12 1 8 0 12 1 8 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (cdr car)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cdddar) (CODE (3 0 8 0 12 1 8 1 12 1 8 1 12 1 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car cdr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cddddr) (CODE (3 0 8 0 12 1 8 0 12 1 8 0 12 1 8 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (cdr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME list) (CODE (3 0 14)) (NB-ARGS 1 #t) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES ()) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME cons*) (CODE (3 0 8 0 12 1 11 0 13 1 14)) (NB-ARGS 1 #t) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (reverse)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 8 0 12 1 8 1 12 1 3 0 8 2 12 1 8 3 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (cdr reverse car append)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME #f) (CODE (5 0 11 0 7 0 10 0 15 11 1 14)) (NB-ARGS 0 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS (#<unspecified>)) (NAMES ()) (FUNCTIONS ((BYTECODE-FUNCTION (NAME length1) (CODE (3 0 8 0 12 1 2 14 0 3 1 0 32 0 3 0 8 1 12 1 10 0 3 1 8 2 12 2 6 2 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((0 2))) (CONSTS (1)) (NAMES (null? cdr +)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME #f) (CODE (3 0 10 0 6 1 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((0 1))) (CONSTS (0)) (NAMES ()) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME #f) (CODE (5 0 11 0 7 0 10 0 15 11 1 14)) (NB-ARGS 0 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS (#<unspecified>)) (NAMES ()) (FUNCTIONS ((BYTECODE-FUNCTION (NAME reverse1) (CODE (3 0 8 0 12 1 2 14 0 3 1 0 36 0 3 0 8 1 12 1 3 0 8 2 12 1 3 1 8 3 12 2 6 2 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((0 2))) (CONSTS ()) (NAMES (null? cdr car cons)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME #f) (CODE (3 0 10 0 6 1 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((0 1))) (CONSTS (())) (NAMES ()) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME list-tail) (CODE (3 1 10 0 8 0 12 2 2 16 0 3 0 0 34 0 3 0 8 1 12 1 3 1 10 1 8 2 12 2 8 3 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS (0 1)) (NAMES (<= cdr - list-tail)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME list-head) (CODE (3 1 10 0 8 0 12 2 2 16 0 10 1 0 44 0 3 0 8 1 12 1 3 0 8 2 12 1 3 1 10 2 8 3 12 2 8 4 12 2 8 5 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS (0 () 1)) (NAMES (= car cdr - list-head cons)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME list-ref) (CODE (3 0 3 1 8 0 12 2 8 1 13 1 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (list-tail car)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME list-index) (CODE (5 1 5 2 11 0 7 2 10 0 15 3 0 10 1 6 2 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 3) (UPVAL-DESCRS ()) (CONSTS (#<unspecified> 0)) (NAMES ()) (FUNCTIONS ((BYTECODE-FUNCTION (NAME loop) (CODE (3 0 8 0 12 1 2 14 0 10 0 0 52 0 3 0 8 1 12 1 6 2 8 2 12 2 2 34 0 3 1 0 52 0 3 0 8 3 12 1 3 1 10 1 8 4 12 2 6 3 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((1 2) (2 3))) (CONSTS (#f 1)) (NAMES (null? car equal? cdr +)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME map) (CODE (5 0 5 2 11 0 7 2 10 0 15 3 1 10 1 6 2 12 2 8 0 13 1 14)) (NB-ARGS 2 #f) (NB-LOCALS 3) (UPVAL-DESCRS ()) (CONSTS (#<unspecified> ())) (NAMES (reverse)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME rev-map) (CODE (3 0 8 0 12 1 2 14 0 3 1 0 40 0 3 0 8 1 12 1 3 0 8 2 12 1 6 2 12 1 3 1 8 3 12 2 6 3 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((0 2) (2 3))) (CONSTS ()) (NAMES (null? cdr car cons)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME for-each) (CODE (3 1 8 0 12 1 2 14 0 10 0 0 37 0 3 1 8 1 12 1 3 0 12 1 15 3 0 3 1 8 2 12 1 8 3 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS (())) (NAMES (null? car cdr for-each)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME append) (CODE (3 0 8 0 12 1 2 14 0 3 1 0 36 0 3 0 8 1 12 1 3 0 8 2 12 1 3 1 8 3 12 2 8 4 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (null? car cdr append cons)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME assoc) (CODE (3 1 8 0 12 1 2 14 0 10 0 0 50 0 3 0 3 1 8 1 12 1 8 2 12 2 2 38 0 3 1 8 3 13 1 0 50 0 3 0 3 1 8 4 12 1 8 5 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS (#f)) (NAMES (null? caar equal? car cdr assoc)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME range) (CODE (5 1 11 0 7 1 10 0 15 3 0 8 0 12 1 4 2 10 0 15 3 2 10 1 8 1 12 2 2 48 0 10 2 3 0 8 2 12 1 10 1 6 1 13 3 0 152 0 3 2 10 3 8 1 12 2 2 80 0 3 0 8 2 12 1 3 0 8 3 12 1 10 1 6 1 13 3 0 152 0 3 2 10 4 8 1 12 2 2 116 0 3 0 8 2 12 1 3 0 8 3 12 1 3 0 8 4 12 1 6 1 13 3 0 152 0 10 5 10 6 10 7 10 8 3 0 10 9 8 5 12 2 8 5 12 2 8 5 12 2 8 5 12 2 8 5 12 2 8 6 13 1 14)) (NB-ARGS 1 #t) (NB-LOCALS 3) (UPVAL-DESCRS ()) (CONSTS (#<unspecified> 1 0 2 3 wrong argument count: range ())) (NAMES (length = car cadr caddr cons error)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME mkrange) (CODE (3 0 3 1 8 0 12 2 2 36 0 3 0 3 0 3 2 8 1 12 2 3 1 3 2 6 3 12 3 8 2 13 2 0 38 0 10 0 14)) (NB-ARGS 3 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((1 3))) (CONSTS (())) (NAMES (< + cons)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME fibo) (CODE (3 0 10 0 8 0 12 2 2 16 0 3 0 0 44 0 3 0 10 1 8 1 12 2 8 2 12 1 3 0 10 0 8 1 12 2 8 2 12 1 8 3 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS (2 1)) (NAMES (< - fibo +)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME prn) (CODE (3 0 8 0 12 1 15 8 1 13 0 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (display newline)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME do-times) (CODE (5 3 5 4 5 1 5 2 11 0 7 3 10 0 15 11 1 7 4 10 0 15 3 0 6 4 13 1 14)) (NB-ARGS 3 #t) (NB-LOCALS 5) (UPVAL-DESCRS ()) (CONSTS (#<unspecified>)) (NAMES ()) (FUNCTIONS ((BYTECODE-FUNCTION (NAME thunk) (CODE (6 0 6 1 8 0 13 2 14)) (NB-ARGS 0 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((1 0) (2 1))) (CONSTS ()) (NAMES (apply)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME loop) (CODE (3 0 10 0 8 0 12 2 2 16 0 10 1 0 33 0 6 1 12 0 15 3 0 10 0 8 1 12 2 6 2 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((3 1) (4 2))) (CONSTS (1 #f)) (NAMES (< -)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME assert) (CODE (3 0 8 0 12 1 2 18 0 3 1 8 1 13 1 0 20 0 10 0 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS (#<unspecified>)) (NAMES (not error)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME all) (CODE (3 0 8 0 12 1 2 14 0 10 0 0 52 0 10 1 4 1 10 2 15 3 0 8 1 12 1 4 1 10 2 15 3 1 2 50 0 3 0 8 2 12 1 8 3 13 1 0 52 0 10 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS (#t #f #<unspecified>)) (NAMES (null? car cdr all)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME flatten) (CODE (3 0 8 0 12 1 2 14 0 3 0 0 34 0 3 0 8 1 12 1 3 0 8 2 12 1 8 3 12 1 8 4 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (null? car cdr flatten append)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME concat-map) (CODE (3 0 3 1 8 0 12 2 11 0 13 1 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (map)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 8 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (flatten)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME split-dotted-pair) (CODE (3 0 8 0 12 1 2 32 0 3 0 8 1 12 1 3 0 8 2 12 1 8 3 12 1 11 0 13 2 0 40 0 10 0 3 0 8 4 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS (())) (NAMES (pair? car cdr split-dotted-pair cons)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 3 1 8 0 12 1 8 1 12 2 3 1 8 2 12 1 8 1 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car cons cdr)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME expand-builtin-macro) (CODE (5 0 10 0 4 1 10 1 15 6 0 8 0 12 1 4 1 10 1 15 3 1 2 30 0 3 1 0 95 0 6 0 8 1 12 1 4 1 10 1 15 3 1 2 51 0 3 1 0 95 0 6 0 8 2 12 1 4 1 10 1 15 3 1 2 72 0 3 1 0 95 0 6 0 8 3 12 1 4 1 10 1 15 3 1 2 93 0 3 1 0 95 0 10 0 2 103 0 6 0 0 167 0 6 0 8 4 12 1 2 131 0 6 0 8 5 12 1 6 0 8 6 12 1 11 0 13 2 0 167 0 10 2 10 3 10 4 10 5 6 0 10 6 8 7 12 2 8 7 12 2 8 7 12 2 8 7 12 2 8 7 12 2 8 8 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS (#f #<unspecified> unknown form to expand: ())) (NAMES (symbol? integer? string? boolean? pair? car cdr cons error)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (5 0 6 0 10 0 8 0 12 2 2 22 0 3 1 8 1 13 1 0 230 0 6 0 10 1 8 0 12 2 2 42 0 3 1 8 2 13 1 0 230 0 6 0 10 2 8 0 12 2 2 62 0 3 1 8 3 13 1 0 230 0 6 0 10 3 8 0 12 2 2 82 0 3 1 8 4 13 1 0 230 0 6 0 10 4 8 0 12 2 2 102 0 3 1 8 5 13 1 0 230 0 6 0 10 5 8 0 12 2 2 122 0 3 1 8 6 13 1 0 230 0 6 0 10 6 8 0 12 2 2 146 0 3 1 8 7 12 1 8 8 13 1 0 230 0 6 0 10 7 8 0 12 2 2 176 0 3 1 8 7 12 1 3 1 8 9 12 1 11 0 13 2 0 230 0 6 0 10 8 8 0 12 2 2 206 0 3 1 8 7 12 1 3 1 8 9 12 1 11 1 13 2 0 230 0 6 0 10 9 8 0 12 2 2 222 0 6 2 0 230 0 8 10 6 2 8 11 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((0 2))) (CONSTS (let letrec cond and or require quasiquote define lambda quote)) (NAMES (eq? expand-let expand-letrec expand-cond expand-and expand-or expand-require car expand-quasiquote cdr expand-builtin-macro map)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (6 2 3 0 3 1 8 0 12 1 8 1 13 3 14)) (NB-ARGS 2 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((0 2))) (CONSTS ()) (NAMES (expand-builtin-macro cons*)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME #f) (CODE (6 2 3 0 3 1 8 0 12 1 8 1 13 3 14)) (NB-ARGS 2 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((0 2))) (CONSTS ()) (NAMES (expand-builtin-macro cons*)) (FUNCTIONS ())))))))) (BYTECODE-FUNCTION (NAME expand-let) (CODE (5 1 5 2 11 0 7 1 10 0 15 11 1 7 2 10 0 15 3 0 8 0 12 1 3 0 8 1 12 1 11 2 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ()) (CONSTS (#<unspecified>)) (NAMES (car cdr)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME bindings->names) (CODE (8 0 3 0 8 1 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car map)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME bindings->forms) (CODE (8 0 3 0 8 1 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (cadr map)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME #f) (CODE (10 0 3 0 6 2 12 1 8 0 3 1 8 1 12 2 10 1 8 2 12 2 8 3 12 2 8 3 12 2 8 0 3 0 6 3 12 1 8 1 12 2 10 1 8 2 12 2 8 3 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((1 2) (2 3))) (CONSTS (lambda ())) (NAMES (expand-builtin-macro map append cons)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME expand-letrec) (CODE (5 1 5 2 11 0 7 1 10 0 15 11 1 7 2 10 0 15 3 0 8 0 12 1 3 0 8 1 12 1 11 2 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ()) (CONSTS (#<unspecified>)) (NAMES (car cdr)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME bindings->names) (CODE (8 0 3 0 8 1 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car map)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME bindings->set!-forms) (CODE (11 0 3 0 8 0 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (map)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (10 0 3 0 8 0 12 2 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS (set!)) (NAMES (cons expand-builtin-macro)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME #f) (CODE (10 0 3 0 6 2 12 1 3 0 6 3 12 1 3 1 10 1 8 0 12 2 8 0 12 2 8 1 12 2 8 1 12 2 11 0 3 0 8 2 12 2 10 1 8 0 12 2 8 1 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((1 2) (2 3))) (CONSTS (lambda ())) (NAMES (append cons map)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (10 0 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS (#f)) (NAMES ()) (FUNCTIONS ())))))))) (BYTECODE-FUNCTION (NAME expand-cond) (CODE (5 1 11 0 7 1 10 0 15 3 0 6 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS (#<unspecified>)) (NAMES ()) (FUNCTIONS ((BYTECODE-FUNCTION (NAME expand) (CODE (3 0 8 0 12 1 2 14 0 10 0 0 36 0 3 0 8 1 12 1 3 0 8 2 12 1 3 0 8 3 12 1 11 0 13 3 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((1 1))) (CONSTS (#f)) (NAMES (null? caar cdar cdr)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 10 0 8 0 12 2 2 34 0 10 1 8 1 3 1 8 2 12 2 10 2 8 3 12 2 8 4 13 2 0 86 0 10 3 3 0 8 1 12 1 10 1 8 1 3 1 8 2 12 2 10 2 8 3 12 2 8 4 12 2 3 2 6 3 12 1 10 2 8 4 12 2 8 4 12 2 8 4 12 2 8 4 13 2 14)) (NB-ARGS 3 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((1 3))) (CONSTS (else begin () if)) (NAMES (eq? expand-builtin-macro map append cons)) (FUNCTIONS ())))))))) (BYTECODE-FUNCTION (NAME expand-or) (CODE (5 1 5 2 10 0 8 0 12 1 7 1 10 1 15 11 0 7 2 10 1 15 10 2 10 3 6 1 10 4 10 5 8 1 12 2 8 1 12 2 8 1 12 2 3 0 6 2 12 1 10 5 8 1 12 2 8 1 12 2 8 1 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ()) (CONSTS ("$Gensym_" #<unspecified> begin define #f ())) (NAMES (gensym cons)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME expand) (CODE (3 0 8 0 12 1 2 14 0 10 0 0 34 0 3 0 8 1 12 1 8 2 12 1 3 0 8 3 12 1 11 0 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((1 1) (2 2))) (CONSTS (#f)) (NAMES (null? car expand-builtin-macro cdr)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (10 0 10 1 6 2 3 0 10 2 8 0 12 2 8 0 12 2 8 0 12 2 10 3 6 2 6 2 3 1 6 3 12 1 10 2 8 0 12 2 8 0 12 2 8 0 12 2 8 0 12 2 10 2 8 0 12 2 8 0 12 2 8 0 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((1 2) (2 3))) (CONSTS (begin set! () if)) (NAMES (cons)) (FUNCTIONS ())))))))) (BYTECODE-FUNCTION (NAME expand-and) (CODE (5 1 5 2 10 0 8 0 12 1 7 1 10 1 15 11 0 7 2 10 1 15 10 2 10 3 6 1 10 4 10 5 8 1 12 2 8 1 12 2 8 1 12 2 3 0 6 2 12 1 10 5 8 1 12 2 8 1 12 2 8 1 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ()) (CONSTS ("$Gensym_" #<unspecified> begin define #f ())) (NAMES (gensym cons)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME expand) (CODE (3 0 8 0 12 1 2 14 0 10 0 0 34 0 3 0 8 1 12 1 8 2 12 1 3 0 8 3 12 1 11 0 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((1 1) (2 2))) (CONSTS (#t)) (NAMES (null? car expand-builtin-macro cdr)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (10 0 10 1 6 2 3 0 10 2 8 0 12 2 8 0 12 2 8 0 12 2 10 3 6 2 3 1 8 1 12 1 8 2 12 1 2 52 0 3 1 8 3 12 1 8 4 12 1 0 58 0 3 1 6 3 12 1 10 4 10 2 8 0 12 2 8 0 12 2 8 0 12 2 8 0 12 2 10 2 8 0 12 2 8 0 12 2 8 0 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((1 2) (2 3))) (CONSTS (begin set! () if #f)) (NAMES (cons cdr null? car expand-builtin-macro)) (FUNCTIONS ())))))))) (BYTECODE-FUNCTION (NAME expand-require) (CODE (3 0 8 0 12 1 11 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 8 0 12 1 4 1 10 0 15 3 1 8 1 12 1 4 2 10 0 15 3 1 8 2 12 1 15 10 1 3 2 8 3 12 1 10 2 8 4 12 2 8 5 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ()) (CONSTS (#<unspecified> begin ())) (NAMES (open-input-file read-program close-input-port expand-builtin-macro append cons)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME make-box) (CODE (3 0 10 0 8 0 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS (())) (NAMES (cons)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME expand-unquote!) (CODE (5 1 5 0 6 1 8 0 12 1 11 0 13 1 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (6 1 6 2 3 0 8 0 12 2 8 1 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((1 1) (0 2))) (CONSTS ()) (NAMES (cons set-car!)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME expand-unquote-splicing!) (CODE (5 1 5 0 6 1 8 0 12 1 11 0 13 1 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (6 1 6 2 8 0 12 1 3 0 8 1 12 2 8 2 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((1 1) (0 2))) (CONSTS ()) (NAMES (reverse append set-car!)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME expand-quasiquote) (CODE (3 0 8 0 12 1 2 14 0 10 0 0 30 0 3 0 8 1 12 1 3 0 8 2 12 1 11 0 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ((quote ()))) (NAMES (null? car cdr)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (5 1 5 0 6 0 8 0 12 1 2 32 0 6 0 8 1 12 1 6 0 8 2 12 1 11 0 13 2 0 62 0 10 0 10 1 6 0 8 3 12 2 6 1 8 4 12 1 10 2 8 5 12 2 8 5 12 2 8 5 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS (cons quote ())) (NAMES (pair? car cdr list expand-quasiquote cons)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 10 0 8 0 12 2 2 46 0 10 1 3 1 8 1 12 1 8 2 12 1 6 2 8 3 12 1 10 2 8 4 12 2 8 4 12 2 8 4 13 2 0 190 0 3 0 10 3 8 0 12 2 2 92 0 10 4 3 1 8 1 12 1 8 2 12 1 6 2 8 3 12 1 10 2 8 4 12 2 8 4 12 2 8 4 13 2 0 190 0 3 0 10 5 8 0 12 2 2 162 0 10 1 10 6 10 5 10 5 8 5 12 2 3 1 8 3 12 1 8 6 12 1 10 2 8 4 12 2 8 4 12 2 8 4 12 2 6 2 8 3 12 1 10 2 8 4 12 2 8 4 12 2 8 4 13 2 0 190 0 10 1 6 3 8 3 12 1 6 2 8 3 12 1 10 2 8 4 12 2 8 4 12 2 8 4 13 2 14)) (NB-ARGS 2 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((1 2) (0 3))) (CONSTS (unquote cons () unquote-splicing append quote list)) (NAMES (eq? car expand-builtin-macro expand-quasiquote cons list cadr)) (FUNCTIONS ())))))))) (BYTECODE-FUNCTION (NAME #f) (CODE (5 0 6 0 8 0 12 1 8 1 12 1 11 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (read car)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (6 1 8 0 12 1 15 3 0 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((0 1))) (CONSTS ()) (NAMES (close-input-port)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME codesize) (CODE (3 0 8 0 12 1 8 1 8 2 12 2 8 3 12 1 11 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car *bytecode-descr* assoc caddr)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 10 0 8 0 12 2 2 16 0 10 1 0 50 0 3 0 10 2 8 0 12 2 2 32 0 10 3 0 50 0 3 0 10 4 8 0 12 2 2 48 0 10 5 0 50 0 10 6 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS (void 1 u8 2 u16 3 #f)) (NAMES (eq?)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME #f) (CODE (3 0 10 0 8 0 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS (())) (NAMES (cons)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME #f) (CODE (3 0 8 0 12 1 8 1 8 2 12 2 8 3 12 1 3 0 8 4 12 1 3 0 8 5 12 1 11 0 13 3 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car *bytecode-descr* assoc cadr cdr codesize)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 2 10 0 8 0 12 2 2 22 0 3 0 10 1 8 1 13 2 0 116 0 3 2 10 2 8 0 12 2 2 54 0 3 0 3 1 8 2 12 1 10 1 8 1 12 2 8 1 13 2 0 116 0 3 2 10 3 8 0 12 2 2 114 0 3 0 3 1 8 2 12 1 10 4 8 3 12 2 3 1 8 2 12 1 10 5 8 4 12 2 10 4 8 3 12 2 10 1 8 1 12 2 8 1 12 2 8 1 13 2 0 116 0 10 6 14)) (NB-ARGS 3 #f) (NB-LOCALS 3) (UPVAL-DESCRS ()) (CONSTS (1 () 2 3 255 -8 #f)) (NAMES (= cons car logand ash)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME compile-program) (CODE (10 0 10 1 10 2 8 0 12 3 4 1 10 3 15 3 0 3 1 8 1 12 2 15 10 4 3 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS (main (()) #f #<unspecified> format-output)) (NAMES (make-function compile-function)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME compile-function) (CODE (5 0 5 1 6 0 8 0 12 1 10 0 6 1 12 1 8 1 12 1 11 0 12 2 15 10 1 10 2 6 1 12 2 15 10 3 6 1 13 1 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS (is-toplevel? emit RET resolve-deferred-lambda)) (NAMES (length not)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (11 0 6 2 3 0 10 0 8 0 12 2 8 1 12 2 8 2 12 2 15 6 2 3 0 10 0 8 0 12 2 8 3 12 2 6 3 3 1 8 4 13 3 14)) (NB-ARGS 2 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((0 2) (1 3))) (CONSTS (1)) (NAMES (- list-head for-each list-ref compile-expr-in)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 6 1 10 0 8 0 12 3 15 10 1 10 2 6 1 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((3 1))) (CONSTS (#f emit POP)) (NAMES (compile-expr-in)) (FUNCTIONS ())))))))) (BYTECODE-FUNCTION (NAME compile-expr-in) (CODE (3 0 8 0 12 1 2 22 0 3 0 3 1 3 2 8 1 13 3 0 181 0 3 0 8 2 12 1 2 42 0 3 0 3 1 8 3 13 2 0 181 0 10 0 4 3 10 1 15 3 0 8 4 12 1 4 3 10 1 15 3 3 2 70 0 3 3 0 137 0 3 0 8 5 12 1 4 3 10 1 15 3 3 2 91 0 3 3 0 137 0 3 0 8 6 12 1 4 3 10 1 15 3 3 2 112 0 3 3 0 137 0 3 0 8 7 8 8 12 2 4 3 10 1 15 3 3 2 135 0 3 3 0 137 0 10 0 2 151 0 3 0 3 1 8 9 13 2 0 181 0 10 2 10 3 10 4 3 0 10 5 8 10 12 2 8 10 12 2 8 10 12 2 8 10 12 2 8 11 13 1 14)) (NB-ARGS 3 #f) (NB-LOCALS 4) (UPVAL-DESCRS ()) (CONSTS (#f #<unspecified> cannot compile expr: ())) (NAMES (pair? compile-pair-in symbol? compile-var-in integer? boolean? string? *unspec* eq? compile-const-in cons error)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME compile-pair-in) (CODE (5 1 5 2 3 0 8 0 12 1 3 0 8 1 12 1 11 0 13 2 14)) (NB-ARGS 3 #f) (NB-LOCALS 3) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car cdr)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (5 1 3 0 10 0 8 0 12 2 2 28 0 6 1 8 1 12 1 6 2 8 2 13 2 0 176 0 3 0 10 1 8 0 12 2 2 50 0 6 1 6 2 8 3 13 2 0 176 0 3 0 10 2 8 0 12 2 2 72 0 6 1 6 2 8 4 13 2 0 176 0 3 0 10 3 8 0 12 2 2 96 0 10 4 6 1 6 2 8 5 13 3 0 176 0 3 0 10 5 8 0 12 2 2 140 0 6 1 8 6 12 1 2 127 0 8 7 6 2 8 2 13 2 0 137 0 6 1 8 8 12 1 11 0 13 1 0 176 0 3 0 10 6 8 0 12 2 2 164 0 6 1 6 2 6 3 8 9 13 3 0 176 0 3 0 6 1 6 2 6 3 8 10 13 4 14)) (NB-ARGS 2 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((1 2) (2 3))) (CONSTS (quote define set! lambda #f begin if)) (NAMES (eq? car compile-const-in compile-define-in compile-set!-in compile-lambda-in null? *unspec* length compile-if-in compile-application-in)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (11 0 6 1 3 0 10 0 8 0 12 2 8 1 12 2 8 2 12 2 15 6 1 3 0 10 0 8 0 12 2 8 3 12 2 6 2 6 3 8 4 13 3 14)) (NB-ARGS 1 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((1 1) (2 2) (3 3))) (CONSTS (1)) (NAMES (- list-head for-each list-ref compile-expr-in)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 6 1 10 0 8 0 12 3 15 10 1 10 2 6 1 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((2 1))) (CONSTS (#f emit POP)) (NAMES (compile-expr-in)) (FUNCTIONS ()))))))))))) (BYTECODE-FUNCTION (NAME compile-var-in) (CODE (5 0 5 1 10 0 6 0 6 1 12 2 11 0 13 1 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS (type-of-var)) (NAMES ()) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 10 0 8 0 12 2 2 30 0 10 1 10 2 10 3 6 1 6 2 12 2 6 2 13 3 0 126 0 3 0 10 4 8 0 12 2 2 60 0 10 1 10 5 10 6 6 1 6 2 12 2 6 2 13 3 0 126 0 3 0 10 7 8 0 12 2 2 90 0 10 1 10 8 10 9 6 1 6 2 12 2 6 2 13 3 0 126 0 10 10 10 11 6 1 10 12 3 0 10 13 8 1 12 2 8 1 12 2 8 1 12 2 8 1 12 2 8 1 12 2 8 2 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((0 1) (1 2))) (CONSTS (local emit LOAD get-local global LOADGLOBAL get-name upval LOADUPVAL get-upval not-reached: compile-var-in => ())) (NAMES (eq? cons error)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME compile-const-in) (CODE (5 1 10 0 3 0 6 1 12 2 11 0 13 1 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS (intern-const)) (NAMES ()) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (10 0 10 1 3 0 6 1 13 3 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((1 1))) (CONSTS (emit LOADCONST)) (NAMES ()) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME compile-define-in) (CODE (5 1 3 0 8 0 12 1 3 0 8 1 12 1 10 0 11 0 12 3 15 10 1 10 2 10 3 8 2 6 1 12 2 6 1 13 3 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS (#f emit LOADCONST intern-const)) (NAMES (car cdr *unspec*)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (5 1 5 2 3 0 8 0 12 1 2 37 0 6 1 8 1 12 1 6 3 10 0 8 2 12 3 15 3 0 7 2 10 1 0 71 0 3 0 8 3 12 1 2 65 0 3 0 8 1 12 1 3 0 8 4 12 1 11 0 12 2 0 71 0 10 2 8 5 12 1 15 10 3 6 3 12 1 2 96 0 10 4 6 2 6 3 12 2 11 1 13 1 0 108 0 10 5 6 2 6 3 12 2 11 2 13 1 14)) (NB-ARGS 3 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((1 3))) (CONSTS (#f #<unspecified> syntax-error is-toplevel? get-name define-var)) (NAMES (symbol? car compile-expr-in pair? cdr error)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 3 1 6 2 8 0 12 2 6 3 8 1 12 3 15 3 0 7 4 10 0 14)) (NB-ARGS 2 #f) (NB-LOCALS 5) (UPVAL-DESCRS ((1 2) (3 3) (2 4))) (CONSTS (#<unspecified>)) (NAMES (cons compile-lambda-in)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME #f) (CODE (10 0 10 1 3 0 6 1 13 3 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((3 1))) (CONSTS (emit STOREGLOBAL)) (NAMES ()) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME #f) (CODE (10 0 10 1 3 0 6 1 13 3 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((3 1))) (CONSTS (emit STORE)) (NAMES ()) (FUNCTIONS ())))))))) (BYTECODE-FUNCTION (NAME compile-set!-in) (CODE (5 1 3 0 8 0 12 1 3 0 8 1 12 1 11 0 12 2 15 10 0 10 1 10 2 8 2 6 1 12 2 6 1 13 3 14)) (NB-ARGS 2 #f) (NB-LOCALS 2) (UPVAL-DESCRS ()) (CONSTS (emit LOADCONST intern-const)) (NAMES (car cadr *unspec*)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (5 0 3 1 6 2 10 0 8 0 12 3 15 10 1 6 0 6 2 12 2 11 0 13 1 14)) (NB-ARGS 2 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((1 2))) (CONSTS (#f type-of-var)) (NAMES (compile-expr-in)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 10 0 8 0 12 2 2 30 0 10 1 10 2 10 3 6 1 6 2 12 2 6 2 13 3 0 96 0 3 0 10 4 8 0 12 2 2 60 0 10 1 10 5 10 6 6 1 6 2 12 2 6 2 13 3 0 96 0 3 0 10 7 8 0 12 2 2 90 0 10 1 10 8 10 9 6 1 6 2 12 2 6 2 13 3 0 96 0 10 10 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((0 1) (2 2))) (CONSTS (local emit STORE get-local global STOREGLOBAL get-name upval STOREUPVAL get-upval (not-reached: compile-expr-in))) (NAMES (eq? error)) (FUNCTIONS ())))))))) (BYTECODE-FUNCTION (NAME compile-lambda-in) (CODE (5 0 5 2 3 1 8 0 12 1 8 1 12 1 3 1 8 2 12 1 11 0 13 2 14)) (NB-ARGS 3 #f) (NB-LOCALS 3) (UPVAL-DESCRS ()) (CONSTS ()) (NAMES (car split-dotted-pair cdr)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (10 0 6 2 3 0 3 1 6 3 12 4 11 0 13 1 14)) (NB-ARGS 2 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((0 2) (2 3))) (CONSTS (add-deferred-lambda)) (NAMES ()) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (10 0 10 1 3 0 6 1 13 3 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((3 1))) (CONSTS (emit BUILDCLOSURE)) (NAMES ()) (FUNCTIONS ())))))))) (BYTECODE-FUNCTION (NAME compile-if-in) (CODE (5 1 5 2 3 0 8 0 12 1 3 0 8 1 12 1 3 0 8 2 12 1 10 0 8 3 12 2 2 40 0 3 0 8 4 12 1 0 42 0 8 5 11 0 13 3 14)) (NB-ARGS 3 #f) (NB-LOCALS 3) (UPVAL-DESCRS ()) (CONSTS (3)) (NAMES (car cadr length = caddr *unspec*)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (5 1 5 2 3 0 6 3 10 0 8 0 12 3 15 10 1 10 2 10 3 6 3 12 3 15 10 4 6 3 12 1 10 0 10 0 10 0 11 0 13 4 14)) (NB-ARGS 3 #f) (NB-LOCALS 5) (UPVAL-DESCRS ((1 3) (2 4))) (CONSTS (#f emit JIFNOT -1 last-code-ref)) (NAMES (compile-expr-in)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (6 4 6 5 6 6 8 0 12 3 15 10 0 10 1 10 2 6 5 12 3 15 10 3 6 5 12 1 4 1 10 4 15 10 5 6 5 12 1 4 2 10 4 15 3 0 8 1 12 1 3 2 8 2 12 2 15 6 7 6 5 6 6 8 0 12 3 15 10 5 6 5 12 1 4 3 10 4 15 3 1 8 1 12 1 3 3 8 2 13 2 14)) (NB-ARGS 4 #f) (NB-LOCALS 8) (UPVAL-DESCRS ((1 4) (3 5) (4 6) (2 7))) (CONSTS (emit J -1 last-code-ref #<unspecified> current-pc)) (NAMES (compile-expr-in cdr set-car!)) (FUNCTIONS ())))))))) (BYTECODE-FUNCTION (NAME compile-application-in) (CODE (5 2 11 0 3 1 8 0 12 2 15 3 0 6 2 10 0 8 1 12 3 15 3 3 2 44 0 10 1 10 2 3 1 8 2 12 1 6 2 13 3 0 58 0 10 1 10 3 3 1 8 2 12 1 6 2 13 3 14)) (NB-ARGS 4 #f) (NB-LOCALS 4) (UPVAL-DESCRS ()) (CONSTS (#f emit TAILCALL CALL)) (NAMES (for-each compile-expr-in length)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 6 1 10 0 8 0 13 3 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((2 1))) (CONSTS (#f)) (NAMES (compile-expr-in)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME make-function) (CODE (5 0 5 2 5 13 5 32 5 21 5 6 5 3 5 5 5 12 5 9 5 7 5 8 5 15 5 14 5 33 5 22 5 10 5 20 5 17 5 4 3 1 8 0 12 1 7 3 10 0 15 3 1 8 1 12 1 7 4 10 0 15 6 4 8 2 12 1 8 3 12 1 7 5 10 0 15 10 1 7 6 10 0 15 10 1 7 7 10 0 15 10 1 7 8 10 0 15 10 1 7 9 10 0 15 10 1 7 10 10 0 15 11 0 4 11 10 0 15 3 11 12 0 7 12 10 0 15 10 2 7 13 10 0 15 10 1 7 14 10 0 15 10 3 7 15 10 0 15 11 1 4 16 10 0 15 11 2 7 17 10 0 15 11 3 4 18 10 0 15 11 4 4 19 10 0 15 11 5 7 20 10 0 15 11 6 7 21 10 0 15 11 7 7 22 10 0 15 11 8 4 23 10 0 15 11 9 4 24 10 0 15 11 10 4 25 10 0 15 11 11 4 26 10 0 15 11 12 4 27 10 0 15 11 13 4 28 10 0 15 11 14 4 29 10 0 15 11 15 4 30 10 0 15 11 16 4 31 10 0 15 10 4 3 16 10 1 8 4 12 2 8 4 12 2 10 5 3 26 10 1 8 4 12 2 8 4 12 2 10 6 3 25 10 1 8 4 12 2 8 4 12 2 10 7 6 22 10 1 8 4 12 2 8 4 12 2 10 8 3 23 10 1 8 4 12 2 8 4 12 2 10 9 3 19 10 1 8 4 12 2 8 4 12 2 10 10 3 18 10 1 8 4 12 2 8 4 12 2 10 11 3 24 10 1 8 4 12 2 8 4 12 2 10 12 3 27 10 1 8 4 12 2 8 4 12 2 10 13 3 28 10 1 8 4 12 2 8 4 12 2 10 14 3 29 10 1 8 4 12 2 8 4 12 2 10 15 3 30 10 1 8 4 12 2 8 4 12 2 10 16 3 31 10 1 8 4 12 2 8 4 12 2 10 1 8 4 12 2 8 4 12 2 8 4 12 2 8 4 12 2 8 4 12 2 8 4 12 2 8 4 12 2 8 4 12 2 8 4 12 2 8 4 12 2 8 4 12 2 8 4 12 2 8 4 12 2 7 32 10 0 15 11 17 7 33 10 0 15 6 33 14)) (NB-ARGS 3 #f) (NB-LOCALS 34) (UPVAL-DESCRS ()) (CONSTS (#<unspecified> () 0 #f type-of-var emit intern-const get-local get-name get-upval promote-to-upval define-var last-code-ref remove-last-code add-deferred-lambda resolve-deferred-lambda format-output)) (NAMES (car cdr null? not cons)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME make-locals) (CODE (5 0 10 0 7 0 10 1 15 11 0 6 1 2 33 0 6 2 6 3 10 2 8 0 12 2 8 1 12 2 0 35 0 6 2 8 2 13 2 14)) (NB-ARGS 0 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((5 1) (3 2) (4 3))) (CONSTS (-1 #<unspecified> ())) (NAMES (cons append map)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (6 1 10 0 8 0 12 2 7 1 10 1 15 3 0 6 1 10 2 8 1 12 2 8 1 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((0 1))) (CONSTS (1 #<unspecified> ())) (NAMES (+ cons)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME type-of-var) (CODE (5 0 6 0 6 1 8 0 12 2 2 18 0 10 0 0 56 0 6 0 6 2 8 0 12 2 2 34 0 10 1 0 56 0 6 3 2 54 0 10 2 6 0 6 3 12 2 11 0 13 1 0 56 0 10 3 14)) (NB-ARGS 1 #f) (NB-LOCALS 5) (UPVAL-DESCRS ((12 1) (9 2) (2 3) (17 4))) (CONSTS (local upval type-of-var global)) (NAMES (assoc)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 10 0 8 0 12 2 2 31 0 6 1 10 1 6 1 6 2 12 2 6 3 12 2 15 10 2 0 79 0 3 0 10 2 8 0 12 2 2 62 0 6 1 10 3 6 1 6 2 12 2 6 3 12 2 15 10 2 0 79 0 3 0 10 4 8 0 12 2 10 5 8 1 12 2 15 3 0 14)) (NB-ARGS 1 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((0 1) (3 2) (4 3))) (CONSTS (local promote-to-upval upval get-upval global wtf)) (NAMES (eq? assert)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME add-to-upval-descr) (CODE (5 0 5 1 6 2 8 0 12 1 6 3 8 0 12 1 8 1 12 2 11 0 13 1 14)) (NB-ARGS 2 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((12 2) (9 3))) (CONSTS ()) (NAMES (length +)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (6 1 6 2 3 0 10 0 8 0 12 2 8 0 12 2 8 0 12 2 6 3 8 0 12 2 7 3 10 1 15 3 0 14)) (NB-ARGS 1 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((0 1) (1 2) (3 3))) (CONSTS (() #<unspecified>)) (NAMES (cons)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME promote-to-upval) (CODE (3 0 6 1 8 0 12 2 8 1 12 1 11 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((12 1) (10 2) (20 3))) (CONSTS ()) (NAMES (assoc cadr)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (6 1 3 0 8 0 12 2 8 1 12 1 2 30 0 3 0 6 1 8 2 12 2 7 1 10 0 0 32 0 10 0 15 3 0 6 2 12 1 15 3 0 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((2 1) (3 2))) (CONSTS (#<unspecified>)) (NAMES (list-index not cons)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME get-upval) (CODE (3 0 6 1 8 0 12 2 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((9 1))) (CONSTS ()) (NAMES (assoc caddr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME patch-local-access) (CODE (5 0 11 0 6 1 8 0 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((6 1))) (CONSTS ()) (NAMES (for-each)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (5 0 6 0 8 0 12 1 11 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((0 1))) (CONSTS ()) (NAMES (car)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (10 0 4 1 10 1 15 3 0 10 2 8 0 12 2 4 1 10 1 15 3 1 2 40 0 6 2 8 1 12 1 6 3 8 2 12 2 0 42 0 10 0 2 56 0 6 2 10 3 8 3 13 2 0 114 0 10 0 4 4 10 1 15 3 0 10 4 8 0 12 2 4 4 10 1 15 3 4 2 96 0 6 2 8 1 12 1 6 3 8 2 12 2 0 98 0 10 0 2 112 0 6 2 10 5 8 3 13 2 0 114 0 10 0 14)) (NB-ARGS 1 #f) (NB-LOCALS 5) (UPVAL-DESCRS ((0 2) (1 3))) (CONSTS (#f #<unspecified> LOAD LOADUPVAL STORE STOREUPVAL)) (NAMES (eq? cadr = set-car!)) (FUNCTIONS ())))))))) (BYTECODE-FUNCTION (NAME insert-upval-builder) (CODE (5 1 6 0 8 0 12 1 7 1 10 0 15 6 1 6 1 8 1 12 2 7 1 10 0 15 11 0 6 2 8 2 12 2 15 6 2 11 1 6 0 8 3 12 2 8 4 12 2 7 2 10 0 14)) (NB-ARGS 0 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((10 0) (6 2))) (CONSTS (#<unspecified>)) (NAMES (length + for-each map append)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 8 0 12 1 3 0 8 1 12 1 11 0 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((1 1))) (CONSTS ()) (NAMES (car cdr)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (10 0 4 2 10 1 15 3 0 10 2 8 0 12 2 4 2 10 1 15 3 2 2 30 0 3 2 0 78 0 3 0 10 3 8 0 12 2 4 2 10 1 15 3 2 2 53 0 3 2 0 78 0 3 0 10 4 8 0 12 2 4 2 10 1 15 3 2 2 76 0 3 2 0 78 0 10 0 2 102 0 3 1 3 1 8 1 12 1 6 3 8 2 12 2 8 3 13 2 0 104 0 10 0 14)) (NB-ARGS 2 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((1 3))) (CONSTS (#f #<unspecified> J JIF JIFNOT)) (NAMES (eq? car + set-car!)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME #f) (CODE (10 0 3 0 10 1 8 0 12 2 8 0 13 2 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS (BUILDUPVAL ())) (NAMES (cons)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME get-local) (CODE (3 0 6 1 8 0 12 2 8 1 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((12 1))) (CONSTS ()) (NAMES (assoc cadr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME get-name) (CODE (5 0 6 0 6 1 8 0 12 2 11 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((8 1))) (CONSTS ()) (NAMES (assoc)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 2 14 0 3 0 8 0 13 1 0 24 0 6 1 8 1 12 1 11 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((1 1) (0 2))) (CONSTS ()) (NAMES (cadr length)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (6 1 3 0 10 0 8 0 12 2 8 0 12 2 6 2 8 0 12 2 7 2 10 1 15 3 0 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((2 1) (1 2))) (CONSTS (() #<unspecified>)) (NAMES (cons)) (FUNCTIONS ())))))))) (BYTECODE-FUNCTION (NAME define-var) (CODE (5 0 6 0 6 1 8 0 12 2 2 22 0 6 0 6 2 13 1 0 42 0 6 3 8 1 12 1 6 1 8 1 12 1 8 2 12 2 11 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((12 1) (22 2) (9 3))) (CONSTS ()) (NAMES (assoc length +)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (6 1 3 0 10 0 8 0 12 2 8 0 12 2 6 2 8 0 12 2 7 2 10 1 15 3 0 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((0 1) (1 2))) (CONSTS (() #<unspecified>)) (NAMES (cons)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME intern-const) (CODE (5 0 6 0 6 1 8 0 12 2 11 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((7 1))) (CONSTS ()) (NAMES (assoc)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 2 14 0 3 0 8 0 13 1 0 24 0 6 1 8 1 12 1 11 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((1 1) (0 2))) (CONSTS ()) (NAMES (cadr length)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (6 1 3 0 10 0 8 0 12 2 8 0 12 2 6 2 8 0 12 2 7 2 10 1 15 3 0 14)) (NB-ARGS 1 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((2 1) (1 2))) (CONSTS (() #<unspecified>)) (NAMES (cons)) (FUNCTIONS ())))))))) (BYTECODE-FUNCTION (NAME emit) (CODE (6 1 3 0 8 0 12 1 8 1 12 2 7 1 10 0 15 3 0 6 2 8 2 12 2 7 2 10 0 14)) (NB-ARGS 1 #t) (NB-LOCALS 3) (UPVAL-DESCRS ((13 1) (6 2))) (CONSTS (#<unspecified>)) (NAMES (codesize + cons)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME last-code-ref) (CODE (6 0 8 0 13 1 14)) (NB-ARGS 0 #f) (NB-LOCALS 1) (UPVAL-DESCRS ((6 0))) (CONSTS ()) (NAMES (car)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME remove-last-code) (CODE (6 0 8 0 12 1 7 0 10 0 14)) (NB-ARGS 0 #f) (NB-LOCALS 1) (UPVAL-DESCRS ((6 0))) (CONSTS (#<unspecified>)) (NAMES (cdr)) (FUNCTIONS ())) (BYTECODE-FUNCTION (NAME add-deferred-lambda) (CODE (6 3 8 0 12 1 3 0 3 1 3 2 10 0 8 1 12 2 8 1 12 2 8 1 12 2 11 0 13 2 14)) (NB-ARGS 3 #f) (NB-LOCALS 4) (UPVAL-DESCRS ((14 3))) (CONSTS (())) (NAMES (length cons)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 3 1 8 0 12 2 6 2 8 0 12 2 7 2 10 0 15 3 0 14)) (NB-ARGS 2 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((3 2))) (CONSTS (#<unspecified>)) (NAMES (cons)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME resolve-deferred-lambda) (CODE (11 0 6 0 8 0 12 2 7 1 10 0 14)) (NB-ARGS 0 #f) (NB-LOCALS 3) (UPVAL-DESCRS ((14 0) (15 1) (33 2))) (CONSTS (#<unspecified>)) (NAMES (map)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (3 0 8 0 12 1 3 0 8 1 12 1 3 0 8 2 12 1 3 0 8 3 12 1 11 0 13 4 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((2 1))) (CONSTS ()) (NAMES (car cadr caddr cadddr)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (5 3 3 1 3 2 6 4 8 0 12 3 11 0 13 1 14)) (NB-ARGS 4 #f) (NB-LOCALS 5) (UPVAL-DESCRS ((1 4))) (CONSTS ()) (NAMES (make-function)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (6 1 3 0 8 0 12 2 15 3 0 14)) (NB-ARGS 1 #f) (NB-LOCALS 2) (UPVAL-DESCRS ((3 1))) (CONSTS ()) (NAMES (compile-function)) (FUNCTIONS ()))))))))))) (BYTECODE-FUNCTION (NAME format-output) (CODE (6 0 12 0 15 10 0 10 1 6 1 10 2 8 0 12 2 8 0 12 2 10 3 8 1 6 2 8 2 12 1 8 3 12 2 10 2 8 0 12 2 8 0 12 2 10 4 6 3 8 4 12 1 6 4 2 63 0 10 5 0 65 0 10 6 8 5 12 2 6 4 10 2 8 0 12 2 8 0 12 2 8 0 12 2 10 7 6 5 8 4 12 1 6 6 8 4 12 1 8 5 12 2 10 2 8 0 12 2 8 0 12 2 10 8 8 6 6 6 8 7 12 2 8 2 12 1 10 2 8 0 12 2 8 0 12 2 10 9 8 8 6 7 8 7 12 2 8 2 12 1 10 2 8 0 12 2 8 0 12 2 10 10 8 8 6 8 8 7 12 2 8 2 12 1 10 2 8 0 12 2 8 0 12 2 10 11 11 0 6 9 8 7 12 2 8 2 12 1 10 2 8 0 12 2 8 0 12 2 10 2 8 0 12 2 8 0 12 2 8 0 12 2 8 0 12 2 8 0 12 2 8 0 12 2 8 0 12 2 8 0 12 2 8 0 13 2 14)) (NB-ARGS 0 #f) (NB-LOCALS 10) (UPVAL-DESCRS ((21 0) (0 1) (6 2) (3 3) (5 4) (12 5) (9 6) (7 7) (8 8) (15 9))) (CONSTS (BYTECODE-FUNCTION NAME () CODE NB-ARGS 1 0 NB-LOCALS UPVAL-DESCRS CONSTS NAMES FUNCTIONS)) (NAMES (cons assemble reverse concat-map length + cdr map car)) (FUNCTIONS ((BYTECODE-FUNCTION (NAME #f) (CODE (10 0 3 0 13 1 14)) (NB-ARGS 1 #f) (NB-LOCALS 1) (UPVAL-DESCRS ()) (CONSTS (format-output)) (NAMES ()) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME self) (CODE (3 0 10 0 8 0 12 2 2 16 0 6 2 0 124 0 3 0 10 1 8 0 12 2 2 32 0 6 3 0 124 0 3 0 10 2 8 0 12 2 2 48 0 6 4 0 124 0 3 0 10 3 8 0 12 2 2 68 0 6 3 8 1 13 1 0 124 0 3 0 6 5 8 2 12 2 2 100 0 3 0 6 5 8 2 12 2 8 3 12 1 3 1 8 4 13 2 0 124 0 10 4 3 0 3 1 10 5 8 5 12 2 8 5 12 2 8 5 12 2 8 6 13 1 14)) (NB-ARGS 2 #t) (NB-LOCALS 6) (UPVAL-DESCRS ((0 2) (2 3) (13 4) (32 5))) (CONSTS (name outer current-pc is-toplevel? attribute-error: ())) (NAMES (eq? not assoc cadr apply cons error)) (FUNCTIONS ()))))) (BYTECODE-FUNCTION (NAME run-program) (CODE (3 0 8 0 12 1 4 1 10 0 15 3 1 8 1 12 1 4 2 10 0 15 3 2 8 2 12 1 4 3 10 0 15 3 3 13 0 14)) (NB-ARGS 1 #f) (NB-LOCALS 4) (UPVAL-DESCRS ()) (CONSTS (#<unspecified>)) (NAMES (expand-builtin-macro compile-program load-bytecode-function)) (FUNCTIONS ())))))